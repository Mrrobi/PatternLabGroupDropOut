{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Cross_validation_random_forest_kmer_tnc_dnc","provenance":[{"file_id":"1oe70DSheasp76r-py6vnn9EotiPQpgZf","timestamp":1599663854971},{"file_id":"18_WorqQZJXVfsQ5LtPEarhQc6owMNPxO","timestamp":1599568697122},{"file_id":"17iSkHm0p7PRZemLd9FvkZV4jNzcw8o-s","timestamp":1599500090805}],"collapsed_sections":[],"mount_file_id":"1cphtn_Tnm2NSS36gRHfeYjbzjzkYKDFE","authorship_tag":"ABX9TyP3nNp3joLM1a5uJR9XY80r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"42QExKEoQKf_","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599665242107,"user_tz":-360,"elapsed":1596,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}}},"source":["from sklearn.model_selection import train_test_split\n","import numpy as np\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import KFold\n","from sklearn.ensemble import RandomForestClassifier"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZJuW8MrJQsmP","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599665255713,"user_tz":-360,"elapsed":11713,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}}},"source":["a_pos_5289 = \"/content/drive/My Drive/fasta dataset/A.thaliana5289_pos/kmer3/A.thaliana5289_pos_kmer_tnc_3.npy\"\n","a_neg_5289 = \"/content/drive/My Drive/fasta dataset/A.thaliana5289_neg/kmer3/A.thaliana5289_neg_kmer_tnc.npy\"\n","a_pos_1000 = \"/content/drive/My Drive/fasta dataset/A.thaliana1000indep_pos/kmer3/A.thaliana1000indep_pos_kmer_tnc.npy\"\n","a_neg_1000 = \"/content/drive/My Drive/fasta dataset/A.thaliana1000indep_neg/kmer_tnc/A.thaliana1000indep_neg_kmer_tnc.npy\"\n","\n","a_x_train_pos = np.load(a_pos_5289) \n","a_x_train_neg = np.load(a_neg_5289) \n","a_x_test_pos = np.load(a_pos_1000) \n","a_x_test_neg = np.load(a_neg_1000) \n","\n","\n","b_pos_5289 = \"/content/drive/My Drive/fasta dataset/A.thaliana5289_pos/kmer2/A.thaliana5289_pos_kmer_dnc_2.npy\"\n","b_neg_5289 = \"/content/drive/My Drive/fasta dataset/A.thaliana5289_neg/kmer2/A.thaliana5289_neg_kmer_dnc.npy\"\n","b_pos_1000 = \"/content/drive/My Drive/fasta dataset/A.thaliana1000indep_pos/kmer2/A.thaliana1000indep_pos_kmer_dnc.npy\"\n","b_neg_1000 = \"/content/drive/My Drive/fasta dataset/A.thaliana1000indep_neg/kmer_dnc/A.thaliana1000indep_neg_kmer_dnc.npy\"\n","\n","b_x_train_pos = np.load(b_pos_5289) \n","b_x_train_neg = np.load(b_neg_5289) \n","b_x_test_pos = np.load(b_pos_1000) \n","b_x_test_neg = np.load(b_neg_1000) \n","\n","y_train_pos = np.tile(1, 5289) \n","y_train_neg = np.tile(0, 5289) \n","y_test_pos = np.tile(1, 1000) \n","y_test_neg = np.tile(0, 1000) "],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"JgHs0GdIfCEc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":306},"executionInfo":{"status":"ok","timestamp":1599665364253,"user_tz":-360,"elapsed":997,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"102ad1a1-110e-4484-9b9a-cba912658956"},"source":["print(a_x_test_neg.shape)\n","print(y_test_neg.shape)\n","print(a_x_train_neg.shape)\n","print(y_train_neg.shape)\n","\n","print(a_x_test_pos.shape)\n","print(y_test_pos.shape)\n","print(a_x_train_pos.shape)\n","print(y_train_pos.shape)\n","\n","print()\n","print(b_x_test_neg.shape)\n","print(y_test_neg.shape)\n","print(b_x_train_neg.shape)\n","print(y_train_neg.shape)\n","\n","print(b_x_test_pos.shape)\n","print(y_test_pos.shape)\n","print(b_x_train_pos.shape)\n","print(y_train_pos.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["(1000, 64)\n","(1000,)\n","(5289, 64)\n","(5289,)\n","(1000, 64)\n","(1000,)\n","(5289, 64)\n","(5289,)\n","\n","(1000, 16)\n","(1000,)\n","(5289, 16)\n","(5289,)\n","(1000, 16)\n","(1000,)\n","(5289, 16)\n","(5289,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dn6yh4z1Q34j","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599665368797,"user_tz":-360,"elapsed":1030,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}}},"source":["a_x_training = np.concatenate((a_x_train_pos, a_x_train_neg), axis = 0)\n","a_x_test = np.concatenate((a_x_test_pos, a_x_test_neg), axis = 0)\n","\n","b_x_training = np.concatenate((b_x_train_pos, b_x_train_neg), axis = 0)\n","b_x_test = np.concatenate((b_x_test_pos, b_x_test_neg), axis = 0)\n","\n","y_training = np.concatenate((y_train_pos,y_train_neg))\n","y_test = np.concatenate((y_test_pos,y_test_neg))"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"jOqtLcRPZpw4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1599665399416,"user_tz":-360,"elapsed":1090,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"12cf5ea4-eef3-4521-d310-92f0f16c1e98"},"source":["print(a_x_training.shape)\n","print(a_x_test.shape)\n","\n","print(b_x_training.shape)\n","print(b_x_test.shape)\n","\n","print()\n","print(y_test.shape)\n","print(y_training.shape)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(10578, 64)\n","(2000, 64)\n","(10578, 16)\n","(2000, 16)\n","\n","(2000,)\n","(10578,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eTlOT_LqZp8n","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599665404576,"user_tz":-360,"elapsed":965,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}}},"source":["x_training = np.concatenate((a_x_training, b_x_training), axis = 1)\n","\n","x_test = np.concatenate((a_x_test, b_x_test), axis = 1)"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"oHNfn7JkZut-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1599665408097,"user_tz":-360,"elapsed":1265,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"6b8574a4-4eff-4287-cc17-80b80a2bc178"},"source":["print(x_training.shape)\n","print(x_test.shape)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["(10578, 80)\n","(2000, 80)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AG55N_UQQ_1M","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599665413170,"user_tz":-360,"elapsed":923,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}}},"source":["seed = 40\n","np.random.seed(seed)\n","\n","kf = KFold(n_splits=5, random_state=seed, shuffle=True)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"EzE29b7Vfx01","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599665618759,"user_tz":-360,"elapsed":199893,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"b3cb433d-37b8-45e8-b83f-180b9b5d67ef"},"source":["#fix estimator part 1\n","test_avg_list = []\n","\n","for c in range(50,501,50):\n","  test_avg = 0\n","\n","  print(f'for n_estimators = {c}:')\n","\n","  clf = RandomForestClassifier(n_estimators = c, max_depth = None)\n","  val_accuracy_list = []\n","  train_accuracy_list = []\n","  test_accuracy_list = []\n","\n","  for train_index, val_index in kf.split(x_training):\n","\n","    X_train, X_val = x_training[train_index], x_training[val_index]\n","    y_train, y_val = y_training[train_index], y_training[val_index]\n","    \n","    clf.fit(X_train, y_train)\n","\n","    y_val_pred = clf.predict(X_val)\n","    val_accuracy = accuracy_score(y_val, y_val_pred)\n","    val_accuracy_list.append(val_accuracy)\n","\n","    y_train_pred = clf.predict(X_train)\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    train_accuracy_list.append(train_accuracy)\n","\n","    y_test_pred = clf.predict(x_test)\n","    test_accuracy = accuracy_score(y_test, y_test_pred)\n","    test_avg = test_avg + test_accuracy\n","    test_accuracy_list.append(test_accuracy)\n","\n","  test_avg = test_avg/(len(test_accuracy_list))\n","  test_avg_list.append(test_avg)\n","\n","  for i in range(0, len(train_accuracy_list)):\n","    print(\"train_accuracy : \", train_accuracy_list[i], \"\\tVal accuracy : \", val_accuracy_list[i], \"\\tTest accuracy : \", test_accuracy_list[i])\n","  print(f'Avg test accuracy for that c is = {test_avg}')\n","  print()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["for n_estimators = 50:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.825\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8365\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.827\n","train_accuracy :  1.0 \tVal accuracy :  0.9981087470449173 \tTest accuracy :  0.8075\n","train_accuracy :  1.0 \tVal accuracy :  0.9981087470449173 \tTest accuracy :  0.766\n","Avg test accuracy for that c is = 0.8124\n","\n","for n_estimators = 100:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.819\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.826\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  0.9985815602836879 \tTest accuracy :  0.8055\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.823\n","Avg test accuracy for that c is = 0.8202999999999999\n","\n","for n_estimators = 150:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8275\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8315\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8345\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8125\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8385\n","Avg test accuracy for that c is = 0.8289\n","\n","for n_estimators = 200:\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.841\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.826\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8095\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8225\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.825\n","Avg test accuracy for that c is = 0.8248\n","\n","for n_estimators = 250:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8535\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.819\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8285\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.829\n","Avg test accuracy for that c is = 0.8320000000000001\n","\n","for n_estimators = 300:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8295\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8235\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8205\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8245\n","Avg test accuracy for that c is = 0.8272999999999999\n","\n","for n_estimators = 350:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.834\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.835\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8295\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.824\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.819\n","Avg test accuracy for that c is = 0.8282999999999999\n","\n","for n_estimators = 400:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.827\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.815\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8365\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.836\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8325\n","Avg test accuracy for that c is = 0.8294\n","\n","for n_estimators = 450:\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8195\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8275\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8235\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8345\n","Avg test accuracy for that c is = 0.8266\n","\n","for n_estimators = 500:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8215\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.838\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.823\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.852\n","Avg test accuracy for that c is = 0.8324999999999999\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TTFKt4WRmRl3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":833},"executionInfo":{"status":"ok","timestamp":1599665881859,"user_tz":-360,"elapsed":228603,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"d1328d58-098a-4e11-f7ed-34ae1e2621de"},"source":["#fix estimator part 2\n","test_avg_list = []\n","\n","for c in range(500,551,10):\n","  test_avg = 0\n","\n","  print(f'for n_estimators = {c}:')\n","\n","  clf = RandomForestClassifier(n_estimators = c, max_depth = None)\n","  val_accuracy_list = []\n","  train_accuracy_list = []\n","  test_accuracy_list = []\n","\n","  for train_index, val_index in kf.split(x_training):\n","\n","    X_train, X_val = x_training[train_index], x_training[val_index]\n","    y_train, y_val = y_training[train_index], y_training[val_index]\n","    \n","    clf.fit(X_train, y_train)\n","\n","    y_val_pred = clf.predict(X_val)\n","    val_accuracy = accuracy_score(y_val, y_val_pred)\n","    val_accuracy_list.append(val_accuracy)\n","\n","    y_train_pred = clf.predict(X_train)\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    train_accuracy_list.append(train_accuracy)\n","\n","    y_test_pred = clf.predict(x_test)\n","    test_accuracy = accuracy_score(y_test, y_test_pred)\n","    test_avg = test_avg + test_accuracy\n","    test_accuracy_list.append(test_accuracy)\n","\n","  test_avg = test_avg/(len(test_accuracy_list))\n","  test_avg_list.append(test_avg)\n","\n","  for i in range(0, len(train_accuracy_list)):\n","    print(\"train_accuracy : \", train_accuracy_list[i], \"\\tVal accuracy : \", val_accuracy_list[i], \"\\tTest accuracy : \", test_accuracy_list[i])\n","  print(f'Avg test accuracy for that c is = {test_avg}')\n","  print()"],"execution_count":12,"outputs":[{"output_type":"stream","text":["for n_estimators = 500:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8465\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8325\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.833\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.836\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8365\n","Avg test accuracy for that c is = 0.8369\n","\n","for n_estimators = 510:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8345\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8295\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8325\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8425\n","Avg test accuracy for that c is = 0.8333999999999999\n","\n","for n_estimators = 520:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8265\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  0.9976370510396976 \tTest accuracy :  0.832\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8315\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8245\n","Avg test accuracy for that c is = 0.8285\n","\n","for n_estimators = 530:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8435\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.833\n","train_accuracy :  1.0 \tVal accuracy :  0.9976370510396976 \tTest accuracy :  0.8215\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.842\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8295\n","Avg test accuracy for that c is = 0.8339000000000001\n","\n","for n_estimators = 540:\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8435\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8335\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.829\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.835\n","Avg test accuracy for that c is = 0.8359\n","\n","for n_estimators = 550:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8365\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.823\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.838\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8415\n","Avg test accuracy for that c is = 0.8338000000000001\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yaytydwznA_O","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599666396981,"user_tz":-360,"elapsed":358934,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"eabee741-8c43-4b63-b77b-87a1c76a7a3e"},"source":["#fix estimator part 3\n","test_avg_list = []\n","c = 11\n","for c in range(500,510,1):\n","  test_avg = 0\n","\n","  print(f'for n_estimetors = {c}:')\n","\n","  clf = RandomForestClassifier(n_estimators = c, max_depth = None)\n","  val_accuracy_list = []\n","  train_accuracy_list = []\n","  test_accuracy_list = []\n","\n","  for train_index, val_index in kf.split(x_training):\n","\n","    X_train, X_val = x_training[train_index], x_training[val_index]\n","    y_train, y_val = y_training[train_index], y_training[val_index]\n","    \n","    clf.fit(X_train, y_train)\n","\n","    y_val_pred = clf.predict(X_val)\n","    val_accuracy = accuracy_score(y_val, y_val_pred)\n","    val_accuracy_list.append(val_accuracy)\n","\n","    y_train_pred = clf.predict(X_train)\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    train_accuracy_list.append(train_accuracy)\n","\n","    y_test_pred = clf.predict(x_test)\n","    test_accuracy = accuracy_score(y_test, y_test_pred)\n","    test_avg = test_avg + test_accuracy\n","    test_accuracy_list.append(test_accuracy)\n","\n","  test_avg = test_avg/(len(test_accuracy_list))\n","  test_avg_list.append(test_avg)\n","\n","  for i in range(0, len(train_accuracy_list)):\n","    print(\"train_accuracy : \", train_accuracy_list[i], \"\\tVal accuracy : \", val_accuracy_list[i], \"\\tTest accuracy : \", test_accuracy_list[i])\n","  print(f'Avg test accuracy for that c is = {test_avg}')\n","  print()"],"execution_count":13,"outputs":[{"output_type":"stream","text":["for n_estimetors = 500:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.836\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.835\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8245\n","Avg test accuracy for that c is = 0.8314999999999999\n","\n","for n_estimetors = 501:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.818\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.834\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.839\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8305\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8275\n","Avg test accuracy for that c is = 0.8297999999999999\n","\n","for n_estimetors = 502:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.834\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.839\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.832\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.825\n","train_accuracy :  1.0 \tVal accuracy :  0.9985815602836879 \tTest accuracy :  0.8325\n","Avg test accuracy for that c is = 0.8324999999999999\n","\n","for n_estimetors = 503:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8425\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.844\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.827\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.838\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8265\n","Avg test accuracy for that c is = 0.8356\n","\n","for n_estimetors = 504:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8355\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8245\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8265\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8265\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8345\n","Avg test accuracy for that c is = 0.8295000000000001\n","\n","for n_estimetors = 505:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.839\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.834\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8285\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8435\n","Avg test accuracy for that c is = 0.835\n","\n","for n_estimetors = 506:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.821\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8355\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8285\n","Avg test accuracy for that c is = 0.8294\n","\n","for n_estimetors = 507:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8365\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8285\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8355\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8375\n","Avg test accuracy for that c is = 0.8338000000000001\n","\n","for n_estimetors = 508:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8275\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8395\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8255\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.851\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8255\n","Avg test accuracy for that c is = 0.8338000000000001\n","\n","for n_estimetors = 509:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.836\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8215\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8345\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8375\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8415\n","Avg test accuracy for that c is = 0.8342\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nA68mgNlAP_3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599667280666,"user_tz":-360,"elapsed":684497,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"d30a287e-a60c-4224-f6de-abea0b558811"},"source":["#fix maxdepth part 1\n","test_avg_list = []\n","for c in range(5,101,5):\n","  test_avg = 0\n","\n","  print(f'for max_depth = {c}:')\n","\n","  clf = RandomForestClassifier(n_estimators = 503, max_depth = c)\n","  val_accuracy_list = []\n","  train_accuracy_list = []\n","  test_accuracy_list = []\n","\n","  for train_index, val_index in kf.split(x_training):\n","\n","    X_train, X_val = x_training[train_index], x_training[val_index]\n","    y_train, y_val = y_training[train_index], y_training[val_index]\n","    \n","    clf.fit(X_train, y_train)\n","\n","    y_val_pred = clf.predict(X_val)\n","    val_accuracy = accuracy_score(y_val, y_val_pred)\n","    val_accuracy_list.append(val_accuracy)\n","\n","    y_train_pred = clf.predict(X_train)\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    train_accuracy_list.append(train_accuracy)\n","\n","    y_test_pred = clf.predict(x_test)\n","    test_accuracy = accuracy_score(y_test, y_test_pred)\n","    test_avg = test_avg + test_accuracy\n","    test_accuracy_list.append(test_accuracy)\n","\n","  test_avg = test_avg/(len(test_accuracy_list))\n","  test_avg_list.append(test_avg)\n","\n","  for i in range(0, len(train_accuracy_list)):\n","    print(\"train_accuracy : \", train_accuracy_list[i], \"\\tVal accuracy : \", val_accuracy_list[i], \"\\tTest accuracy : \", test_accuracy_list[i])\n","  print(f'Avg test accuracy for that c is = {test_avg}')\n","  print()"],"execution_count":14,"outputs":[{"output_type":"stream","text":["for max_depth = 5:\n","train_accuracy :  0.9851099030961947 \tVal accuracy :  0.9825141776937618 \tTest accuracy :  0.809\n","train_accuracy :  0.9825100449066415 \tVal accuracy :  0.9801512287334594 \tTest accuracy :  0.799\n","train_accuracy :  0.9835736232569132 \tVal accuracy :  0.9844045368620038 \tTest accuracy :  0.7975\n","train_accuracy :  0.9846390168970814 \tVal accuracy :  0.984869976359338 \tTest accuracy :  0.7905\n","train_accuracy :  0.9842845326716294 \tVal accuracy :  0.9791962174940898 \tTest accuracy :  0.806\n","Avg test accuracy for that c is = 0.8004\n","\n","for max_depth = 10:\n","train_accuracy :  0.9995272985109903 \tVal accuracy :  0.9976370510396976 \tTest accuracy :  0.848\n","train_accuracy :  0.9994091231387379 \tVal accuracy :  0.997164461247637 \tTest accuracy :  0.825\n","train_accuracy :  0.9995272985109903 \tVal accuracy :  0.9966918714555766 \tTest accuracy :  0.8265\n","train_accuracy :  0.999763677183032 \tVal accuracy :  0.9976359338061466 \tTest accuracy :  0.8315\n","train_accuracy :  0.99940919295758 \tVal accuracy :  0.9976359338061466 \tTest accuracy :  0.833\n","Avg test accuracy for that c is = 0.8328000000000001\n","\n","for max_depth = 15:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.842\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.823\n","train_accuracy :  1.0 \tVal accuracy :  0.9976370510396976 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8305\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8255\n","Avg test accuracy for that c is = 0.8318999999999999\n","\n","for max_depth = 20:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8345\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.833\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.825\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.835\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.837\n","Avg test accuracy for that c is = 0.8328999999999999\n","\n","for max_depth = 25:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.824\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8235\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.834\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8385\n","Avg test accuracy for that c is = 0.8300000000000001\n","\n","for max_depth = 30:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.845\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8285\n","train_accuracy :  1.0 \tVal accuracy :  0.9976370510396976 \tTest accuracy :  0.8345\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.846\n","train_accuracy :  1.0 \tVal accuracy :  0.9985815602836879 \tTest accuracy :  0.838\n","Avg test accuracy for that c is = 0.8384\n","\n","for max_depth = 35:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.837\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.845\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8335\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8405\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.839\n","Avg test accuracy for that c is = 0.8390000000000001\n","\n","for max_depth = 40:\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.849\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8195\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8275\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8305\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.825\n","Avg test accuracy for that c is = 0.8303\n","\n","for max_depth = 45:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.821\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8245\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8275\n","Avg test accuracy for that c is = 0.8285\n","\n","for max_depth = 50:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8275\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8205\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.842\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.822\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8235\n","Avg test accuracy for that c is = 0.8271000000000001\n","\n","for max_depth = 55:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.835\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8305\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8285\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.843\n","Avg test accuracy for that c is = 0.833\n","\n","for max_depth = 60:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.842\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.836\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.834\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8415\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8345\n","Avg test accuracy for that c is = 0.8375999999999999\n","\n","for max_depth = 65:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.844\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.82\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8335\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.832\n","Avg test accuracy for that c is = 0.8314999999999999\n","\n","for max_depth = 70:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8315\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8315\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.824\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.832\n","Avg test accuracy for that c is = 0.8314999999999999\n","\n","for max_depth = 75:\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8355\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8375\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.836\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8295\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8185\n","Avg test accuracy for that c is = 0.8314\n","\n","for max_depth = 80:\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8325\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8375\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.837\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8365\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8315\n","Avg test accuracy for that c is = 0.835\n","\n","for max_depth = 85:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8485\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.8265\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.829\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.835\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8365\n","Avg test accuracy for that c is = 0.8351\n","\n","for max_depth = 90:\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8245\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.828\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8285\n","Avg test accuracy for that c is = 0.8286\n","\n","for max_depth = 95:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.832\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.829\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8395\n","train_accuracy :  1.0 \tVal accuracy :  0.9990543735224586 \tTest accuracy :  0.8395\n","Avg test accuracy for that c is = 0.8357000000000001\n","\n","for max_depth = 100:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8235\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.825\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.833\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8355\n","Avg test accuracy for that c is = 0.8295999999999999\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"032qYnLmCyoh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":697},"executionInfo":{"status":"ok","timestamp":1599668195369,"user_tz":-360,"elapsed":173219,"user":{"displayName":"Kazi Ferdous Mahin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgtCxuxVJXQasdKsNGE172mQbQgntjPLwlNnDsVGA=s64","userId":"07197529474479470395"}},"outputId":"0db762a9-dc93-48c2-9855-8ad2d2b443a4"},"source":["#fix maxdepth part 2\n","test_avg_list = []\n","for c in range(35,40,1):\n","  test_avg = 0\n","\n","  print(f'for max_depth = {c}:')\n","\n","  clf = RandomForestClassifier(n_estimators = 503, max_depth = c)\n","  val_accuracy_list = []\n","  train_accuracy_list = []\n","  test_accuracy_list = []\n","\n","  for train_index, val_index in kf.split(x_training):\n","\n","    X_train, X_val = x_training[train_index], x_training[val_index]\n","    y_train, y_val = y_training[train_index], y_training[val_index]\n","    \n","    clf.fit(X_train, y_train)\n","\n","    y_val_pred = clf.predict(X_val)\n","    val_accuracy = accuracy_score(y_val, y_val_pred)\n","    val_accuracy_list.append(val_accuracy)\n","\n","    y_train_pred = clf.predict(X_train)\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    train_accuracy_list.append(train_accuracy)\n","\n","    y_test_pred = clf.predict(x_test)\n","    test_accuracy = accuracy_score(y_test, y_test_pred)\n","    test_avg = test_avg + test_accuracy\n","    test_accuracy_list.append(test_accuracy)\n","\n","  test_avg = test_avg/(len(test_accuracy_list))\n","  test_avg_list.append(test_avg)\n","\n","  for i in range(0, len(train_accuracy_list)):\n","    print(\"train_accuracy : \", train_accuracy_list[i], \"\\tVal accuracy : \", val_accuracy_list[i], \"\\tTest accuracy : \", test_accuracy_list[i])\n","  print(f'Avg test accuracy for that c is = {test_avg}')\n","  print()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["for max_depth = 35:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.839\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.832\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8215\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.846\n","Avg test accuracy for that c is = 0.8337\n","\n","for max_depth = 36:\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.8335\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8385\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8175\n","Avg test accuracy for that c is = 0.8318\n","\n","for max_depth = 37:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.83\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.8245\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8365\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8305\n","Avg test accuracy for that c is = 0.8302999999999999\n","\n","for max_depth = 38:\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.843\n","train_accuracy :  1.0 \tVal accuracy :  0.9985822306238186 \tTest accuracy :  0.841\n","train_accuracy :  1.0 \tVal accuracy :  0.9976370510396976 \tTest accuracy :  0.8215\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.8305\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.824\n","Avg test accuracy for that c is = 0.8320000000000001\n","\n","for max_depth = 39:\n","train_accuracy :  1.0 \tVal accuracy :  0.999054820415879 \tTest accuracy :  0.839\n","train_accuracy :  1.0 \tVal accuracy :  0.9995274102079396 \tTest accuracy :  0.8275\n","train_accuracy :  1.0 \tVal accuracy :  0.998109640831758 \tTest accuracy :  0.831\n","train_accuracy :  1.0 \tVal accuracy :  0.9995271867612293 \tTest accuracy :  0.833\n","train_accuracy :  1.0 \tVal accuracy :  1.0 \tTest accuracy :  0.8425\n","Avg test accuracy for that c is = 0.8346\n","\n"],"name":"stdout"}]}]}